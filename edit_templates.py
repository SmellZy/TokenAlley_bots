#!/usr/bin/env python3

import json
import os
from message_templates import template_manager

def show_templates():
    """Show all available templates"""
    print("üìù –î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏:")
    print("=" * 50)
    
    templates = template_manager.templates
    for i, (name, content) in enumerate(templates.items(), 1):
        print(f"{i}. {name}")
        print(f"   {content[:100]}{'...' if len(content) > 100 else ''}")
        print()

def edit_template():
    """Edit a specific template"""
    templates = template_manager.list_templates()
    
    print("üìù –î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:")
    for i, name in enumerate(templates, 1):
        print(f"{i}. {name}")
    
    try:
        choice = int(input("\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ")) - 1
        if 0 <= choice < len(templates):
            template_name = templates[choice]
            current_content = template_manager.get_template(template_name)
            
            print(f"\nüìù –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É: {template_name}")
            print("=" * 50)
            print("–ü–æ—Ç–æ—á–Ω–∏–π –≤–º—ñ—Å—Ç:")
            print(current_content)
            print("\n" + "=" * 50)
            
            print("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –≤–º—ñ—Å—Ç (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–≤—ñ—á—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è):")
            lines = []
            while True:
                line = input()
                if line == "" and lines and lines[-1] == "":
                    lines.pop()  # Remove the last empty line
                    break
                lines.append(line)
            
            new_content = "\n".join(lines)
            
            if template_manager.update_template(template_name, new_content):
                print(f"‚úÖ –®–∞–±–ª–æ–Ω '{template_name}' –æ–Ω–æ–≤–ª–µ–Ω–æ!")
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É '{template_name}'")
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä")
    except ValueError:
        print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
    except KeyboardInterrupt:
        print("\n‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")

def show_template_info():
    """Show information about template variables"""
    print("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–º—ñ–Ω–Ω—ñ –≤ —à–∞–±–ª–æ–Ω–∞—Ö:")
    print("=" * 50)
    
    template_vars = {
        "level_1_header": {
            "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä—ñ–≤–Ω—è 1",
            "variables": {"threshold": "–ü–æ—Ä—ñ–≥ —Ñ–∞–Ω–¥–∏–Ω–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1.0)"}
        },
        "level_2_header": {
            "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä—ñ–≤–Ω—è 2",
            "variables": {"threshold": "–ü–æ—Ä—ñ–≥ —Ñ–∞–Ω–¥–∏–Ω–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2.0)"}
        },
        "ticker_box": {
            "description": "–í–µ—Ä—Ö–Ω—è —á–∞—Å—Ç–∏–Ω–∞ –±–ª–æ–∫—É —Ç—ñ–∫–µ—Ä–∞",
            "variables": {"ticker": "–ù–∞–∑–≤–∞ —Ç—ñ–∫–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC)"}
        },
        "ticker_footer": {
            "description": "–ù–∏–∂–Ω—è —á–∞—Å—Ç–∏–Ω–∞ –±–ª–æ–∫—É —Ç—ñ–∫–µ—Ä–∞",
            "variables": {}
        },
        "exchange_line": {
            "description": "–†—è–¥–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±—ñ—Ä–∂—É",
            "variables": {
                "exchange": "–ù–∞–∑–≤–∞ –±—ñ—Ä–∂—ñ (Binance, Bybit, —Ç–æ—â–æ)",
                "ticker": "–ù–∞–∑–≤–∞ —Ç—ñ–∫–µ—Ä–∞",
                "sign": "–ó–Ω–∞–∫ (+ –∞–±–æ -)",
                "rate": "–§–∞–Ω–¥–∏–Ω–≥ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö",
                "cycle_hours": "–¶–∏–∫–ª —Ñ–∞–Ω–¥–∏–Ω–≥—É (1h, 4h, 8h)",
                "payout_time": "–ß–∞—Å –¥–æ –≤–∏–ø–ª–∞—Ç–∏"
            }
        },
        "startup_message": {
            "description": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É",
            "variables": {
                "level1": "–ü–æ—Ä—ñ–≥ —Ä—ñ–≤–Ω—è 1",
                "level2": "–ü–æ—Ä—ñ–≥ —Ä—ñ–≤–Ω—è 2",
                "interval": "–Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö"
            }
        },
        "stats_message": {
            "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–æ—Ä—É",
            "variables": {
                "total": "–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—ñ–∫–µ—Ä—ñ–≤",
                "threshold": "–ü–æ—Ä—ñ–≥ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó",
                "level1": "–ü–æ—Ä—ñ–≥ —Ä—ñ–≤–Ω—è 1",
                "level2": "–ü–æ—Ä—ñ–≥ —Ä—ñ–≤–Ω—è 2",
                "count1": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—ñ–∫–µ—Ä—ñ–≤ —Ä—ñ–≤–Ω—è 1",
                "count2": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—ñ–∫–µ—Ä—ñ–≤ —Ä—ñ–≤–Ω—è 2"
            }
        }
    }
    
    for template_name, info in template_vars.items():
        print(f"üìù {template_name}:")
        print(f"   –û–ø–∏—Å: {info['description']}")
        if info['variables']:
            print("   –ó–º—ñ–Ω–Ω—ñ:")
            for var, desc in info['variables'].items():
                print(f"     {var}: {desc}")
        print()

def reset_templates():
    """Reset all templates to default values"""
    print("‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ —à–∞–±–ª–æ–Ω–∏ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º?")
    confirm = input("–í–≤–µ–¥—ñ—Ç—å 'yes' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ")
    
    if confirm.lower() == 'yes':
        template_manager.reset_to_defaults()
        print("‚úÖ –®–∞–±–ª–æ–Ω–∏ —Å–∫–∏–Ω—É—Ç–æ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º!")
    else:
        print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")

def preview_template():
    """Preview a template with sample data"""
    templates = template_manager.list_templates()
    
    print("üìù –î–æ—Å—Ç—É–ø–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:")
    for i, name in enumerate(templates, 1):
        print(f"{i}. {name}")
    
    try:
        choice = int(input("\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —à–∞–±–ª–æ–Ω—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É: ")) - 1
        if 0 <= choice < len(templates):
            template_name = templates[choice]
            template = template_manager.get_template(template_name)
            
            print(f"\nüìù –ü–µ—Ä–µ–≥–ª—è–¥ —à–∞–±–ª–æ–Ω—É: {template_name}")
            print("=" * 50)
            print("–®–∞–±–ª–æ–Ω:")
            print(template)
            print("\n" + "=" * 50)
            
            # Try to format with sample data
            try:
                if template_name == "level_1_header":
                    formatted = template_manager.format_template(template_name, threshold=1.0)
                elif template_name == "level_2_header":
                    formatted = template_manager.format_template(template_name, threshold=2.0)
                elif template_name == "ticker_box":
                    formatted = template_manager.format_template(template_name, ticker="BTC")
                elif template_name == "exchange_line":
                    formatted = template_manager.format_template(
                        template_name, 
                        exchange="Binance", 
                        ticker="BTC", 
                        sign="+", 
                        rate=1.5, 
                        cycle_hours="8h", 
                        payout_time="Payout in 4h 30min"
                    )
                elif template_name == "startup_message":
                    formatted = template_manager.format_template(template_name, level1=1.0, level2=2.0, interval=300)
                elif template_name == "stats_message":
                    formatted = template_manager.format_template(
                        template_name, 
                        total=10, 
                        threshold=1.0, 
                        level1=1.0, 
                        level2=2.0, 
                        count1=5, 
                        count2=2
                    )
                else:
                    formatted = template
                
                print("–ü—Ä–∏–∫–ª–∞–¥ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:")
                print(formatted)
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è: {e}")
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä")
    except ValueError:
        print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")
    except KeyboardInterrupt:
        print("\n‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")

def main():
    """Main menu"""
    while True:
        print("\nüé® –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
        print("=" * 40)
        print("1. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —à–∞–±–ª–æ–Ω–∏")
        print("2. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —à–∞–±–ª–æ–Ω")
        print("3. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —à–∞–±–ª–æ–Ω")
        print("4. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–º—ñ–Ω–Ω—ñ")
        print("5. –°–∫–∏–Ω—É—Ç–∏ –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
        print("6. –í–∏—Ö—ñ–¥")
        
        try:
            choice = input("\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ")
            
            if choice == "1":
                show_templates()
            elif choice == "2":
                edit_template()
            elif choice == "3":
                preview_template()
            elif choice == "4":
                show_template_info()
            elif choice == "5":
                reset_templates()
            elif choice == "6":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

if __name__ == "__main__":
    main()
